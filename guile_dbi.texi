\input texinfo @c -*-texinfo-*-
@setfilename guile-dbi.info
@settitle Библиотка DBI к Guile
@titlepage
@title Guile DBI Руководство
@end titlepage

@defindex aa @c функции DBI

@defindex ab @c функции DBD

@node Top, Вступление, (dir), (dir)
@top Guile DBI Руководство

@menu
* Вступление::
* Учебник::
* Руководство::
* Устройство и драйверы баз данных::
* Все функции::
* Заключение::
@end menu

@node Вступление, Учебник, Top, Top
@chapter Вступление
Это самостоятельная документация к Guile DBI, Guile Data Base Interface.
Она описывает, как использовать Guile DBI и как писать новые драйверы базы
данных DBD.

Этот файл содержит информацию издания 2.1.6 справочного руководства,
соответствующего Guile DBI версию 2.1.6.


guile-dbi обеспечивает простой, универсальный, легкий в использовании
интерфейс scheme/guile к базам данных SQL, таких как Postgres, MySQL или
SQLite.

Система разделена на две части: DBI (не зависит от базы данных) часть,
которая обеспечивает интерфейс Scheme и DBD (зависит от базы данных),
подключаемые модули, которые подключаются к реальному серверу SQL.  В
настоящее время существует DBD движки для Postgres, MySQL и SQLite3.

@menu
* История::
* Вступление в Guile DBI::
@end menu

@node История, Вступление в Guile DBI, Вступление, Вступление
@section История
В 2004 годе Маурицио Boriani писал: << Я искал вокруг общей библиотеки баз
данных для Guile реализации схемы и нашел несколько проектов.  Но они, на
самом деле, на самом деле не 'динамические', просто скомпилированы с
различным бэкэндом; Я искал то, что позволит мне управлять базой данных
во время выполнения (например, DBI системы для Perl или PHP, TCL и так
далее), но не нашел этого.  Итак, я пишу это.>>

В 2008 году Лина Vepstas писал: <<I искал общий интерфейс базы данных SQL для
Guile, и это было только один, который был задокументирован и обещал
работать.  Через несколько исправлений ошибок, он заработал, к моему
удовлетворению, и теперь я использую его в одном из моих проектов (подсистема
OpenCog NLP) .>>

@node Вступление в Guile DBI,  , История, Вступление
@section Вступление в Guile DBI
Вы можете найти последнюю версию Guile DBI на странице проекта,
@uref{https://github.com/opencog/guile-dbi/,сайт проекта}.


В области загрузки файла, есть DBI и драйвер тарболы.

@node Учебник, Руководство, Вступление, Top
@chapter Учебник
Scheme интерфейс очень прост. Есть только 5 функций: @ref{guile-dbi dbi-open,, dbi-open},
@ref{guile-dbi dbi-close,, dbi-close}, @ref{guile-dbi dbi-query,, dbi-query},
@ref{guile-dbi dbi-get_status,, dbi-get_status} и @ref{guile-dbi dbi-get_row,, dbi-get_row}.


Guile DBI поддерживает любую базу данных, для которых пишется DBD бэкенд.
В настоящее время это MySQL, Postgres и SQLite.

Вот пример использования, для использования с SQLite3:

@example 	
(use-modules (dbi dbi))

;; Вход в базу данных.
(define db-obj (dbi-open "sqlite3" "my-example-db"))

;; Создать таблицу.
(dbi-query db-obj "create table hellotable(id int, name varchar(15))")

;; Посмотрите на статус возврата последней команды SQL
(display db-obj) (newline)

;; Заполните таблицу значениями.
(dbi-query db-obj "insert into hellotable ('id', 'name') values('33', 'ola')")
(dbi-query db-obj "insert into hellotable ('id', 'name') values('34', 'dzien dobre')")
(dbi-query db-obj "insert into hellotable ('id', 'name') values('44', 'annyong haseyo')")
(display db-obj) (newline)

;; Отображение каждой из строк таблицы, в свою очередь,.
(dbi-query db-obj "select * from hellotable")
(display db-obj) (newline)
(write (dbi-get_row db-obj)) (newline)
(write (dbi-get_row db-obj)) (newline)
(write (dbi-get_row db-obj)) (newline)
(write (dbi-get_row db-obj)) (newline)

;; Закройте базу данных.
(dbi-close db-obj)
(display db-obj) (newline)

@end example

Вот еще один пример, с использованием базы данных MySQL.  В этом примере
предполагается, что сервер MySQL работает, и что таблица с именем "pippo"
уже создана и заполнена данными:

@example
 	
#!/usr/bin/guile -e main -s
!#

(use-modules (dbi dbi))

(define ciccio (dbi-open "mysql" "user:pass:pluto:tcp:localhost:3306"))
(define ret #f)
;; (define ciccio (dbi-open "mysql" "user:pass:pluto:socket:/tmp/mysql.sock"))

(define main
  (lambda (args)
    (display "HERE")(newline)
    (display ciccio)(newline)
    (dbi-query ciccio "select * from pippo")
    (display ciccio)(newline)
    (set! ret (dbi-get_row ciccio))
    (while (not (equal? ret #f))
	   (display ret)(newline)
	   (set! ret (dbi-get_row ciccio))
	   )
    (display ret)(newline)

))

@end example


Ввод учетных данных для PostgreSQL, работа аналогично:

@example
#!/usr/bin/guile -e main -s
!#

(use-modules (dbi dbi))

(define conxion (dbi-open "postgresql" "user:pass:pluto:tcp:localhost:5432"))
(define conxion (dbi-open "postgresql" "user:pass:pluto:socket:/var/run/postgresql"))
@end example

@node Руководство, Устройство и драйверы баз данных, Учебник, Top
@chapter Руководство

@menu
* Функции::
@end menu

@node Функции,  , Руководство, Руководство
@section Функции

@anchor{guile-dbi dbi-open}
@defun dbi-open backend connString

Примитивная функция.@*
Попытка установки соединения @var{backend} нагрузки и подключение к базе данных
используя @var{connString} (строка соединения) для установки функции подключения.

В случае успеха, возвращается объект @code{db-handle}, который будет использоваться
для ссылки на недавно открытые подключения к базе данных.  Этот объект также
содержит статус возврата.

Каждая DBD РЕАЛИЗАЦИЯ требует своего собственного формата строки соединения,
которые должны быть объяснены в файле README.

Например, для подключения к Postgres, используя TCP сокет, на локальном
хосте, на стандартном порту 5432 Postgres по умолчанию:

@example
 	
(dbi-open "postgresql" "user:pass:database:tcp:localhost:5432")

@end example
@end defun

@aaindex dbi-quiery
@anchor{guile-dbi dbi-query}
@defun dbi-query db-handle query

Примитивная функция.@*
Выполнить @var{query} используя @var{db-handle} и получить статус возврата.

Пример:

@example

(dbi-query db "select * from table")

@end example
@end defun

@aaindex dbi-get_status
@anchor{guile-dbi dbi-get_status}
@defun dbi-get_status db-handle

Примитивная функция.@*
Возвращается точечная пара car которой является статус возврата, числовой код
и cdr является строка состояния сообщения.  @var{db-handle} должен быть
действительным дескриптором объекта базы данных.
@end defun

@aaindex dbi-get_row
@anchor{guile-dbi dbi-get_row}
@defun dbi-get_row db-handle

Примитивная функция.@*
Функция вызывается после @code{dbi-query}, возвращает @code{#f} если нет следующей строки
для retrive; в противном случае она возвращает пару. car пары содержит имя
поля и cdr является его значением.

пример:

@example

(dbi-get_row db)

@end example
@end defun

@aaindex dbi-close
@anchor{guile-dbi dbi-close}
@defun dbi-close db-handle

Примитивная функция.@*
Эта функция закрывает @var{db-handle} и разыменовывает загруженный драйвер базы
данных. Когда счетчик ссылок драйвера устанавливается в 0, он освобождается.

пример:

@example

(dbi-close db-handle)

@end example
@end defun

@node Устройство и драйверы баз данных, Все функции, Руководство, Top
@chapter Устройство и драйверы баз данных

@menu
* Внутренние структуры::
* Внутренние функции::
* Как плагины загружаются::
* Как писать плагины::
@end menu

@node Внутренние структуры, Внутренние функции, Устройство и драйверы баз данных, Устройство и драйверы баз данных
@section Внутренние структуры

Основная структура данных, используемая для хранения данных, необходимых
Lib является:

@display 	
typedef struct g_db_handle
@{
  SCM bcknd;   /* @ref{guile-dbi bcknd,, bcknd} */
  SCM constr;  /* @ref{guile-dbi constr,, constr} */
  SCM status;  /* @ref{guile-dbi status,, status} Точечная пара: car = ошибка или числовой код,
                  cdr = статус сообщения */
  SCM closed;  /* @ref{guile-dbi closed,, closed} Булево, TRUE если закрыт в противном случае FALSE */
  void* handle; /* @ref{guile-dbi handle,, handle} */
  void* db_info; /* @ref{guile-dbi db_info,, db_info} */
  int in_free; /* @ref{guile-dbi in_free,, in_free} булево, используется, чтобы избежать Alloc во время
                  сбора мусора */
@} gdbi_db_handle_t;
@end display

@itemize @bullet
@item @code{bcknd} @anchor{guile-dbi bcknd}@*
присвоенное BACKEND имя (e.g. mysql, postgresql, sqlite, ...).

@item @code{constr} @anchor{guile-dbi constr}@*
строка хранит строку подключения бэкенд.  Это не тронутый guile-dbi,
но передается “как есть” в Databse плагин.

@item @code{status} @anchor{guile-dbi status}@*
это пара, которая используется для возврата информации из внутреннего
интерфейса в DBI библиотеки интерфейсов.  Его car это возвращает номер кода
состояния, cdr возврат статус сообщение.

@item @code{closed} @anchor{guile-dbi closed}@*
булево, #t если соединение закрывается, и #f иначе.

@item @code{handle} @anchor{guile-dbi handle}@*
является недействительным указателем используется для точки к
динамически загруженной фоновой библиотеке, заполнен
dbi-open __gdbi_dbd_wrap.  Установите “NULL” на закрытие соединения.

@item @code{db_info} @anchor{guile-dbi db_info}@*
является недействительным указатель, используемый бэкэндом как
ловушка данных.  Установите “NULL” на закрытие соединения.

@item @code{in_free} @anchor{guile-dbi in_free}@*
Логический флаг, используемый, чтобы избежать Alloc во время сбора
мусора.

@end itemize

@node Внутренние функции, Как плагины загружаются, Внутренние структуры, Устройство и драйверы баз данных
@section Внутренние функции

@abindex void __gdbi_dbd_wrap
@defun void __gdbi_dbd_wrap (gdbi_db_handle_t* dbh, char* function_name, void** function_pointer)

Эта функция используются для поиска и возврата в указателе функции, фоновая
функция для того, чтобы затенять основную DBI библиотеку.  Она использует
указатель (который указывает на фоновую динамически загружаемую библиотеку)
для поиска функции с именем “__bcknd_function_name”.  В DBI функции
интерфейса (например, открытие, закрытие, запрос ...) @var{function_name}
заполняются с использованием C “__FUNCTION__” макроса.  Код состояния и
сообщения возвращаются полем состояния dbh.
@end defun

@abindex void init_db_handle_type(void)
@defun void init_db_handle_type(void)
Используется для регистрации статических функций, используемых для
управления dbh SMOB.
@end defun

@abindex void init_dbi(void)
@defun void init_dbi(void)
Используется, чтобы выставить guile-dbi символы так, чтобы из scheme их можно
было вызвать.
@end defun

@node Как плагины загружаются, Как писать плагины, Внутренние функции, Устройство и драйверы баз данных
@section Как плагины загружаются

Все начинается в s_make_db_handle.  Эта функция использует dlopen для
загрузки разделяемой библиотеки с именем “libguile-dbd-bcknd.so”.  bcknd
является первой парой из dbi-open.


Если разделяемая библиотека успешно загружена, dbh's поле “handle”
заполняется указателем, возвращаемый “dlopen” и dbh->status также
устанавливается.  В противном случае статус устанавливается в код ошибки в
car, в то время как cdr заполняется сообщением об ошибке, возвращенной
strerror.


После “dlopen” является ok, __gdbi_dbd_wrap используется для вызова бэкенд
плагина подключения функции передав ей строку подключения.  Если этот шаг
также пройден успешно, то бэкенд должен быть подключен.
В любой другой функции dbi интерфейса, после проверки типа,  __gdbi_dbd_wrap
используются для вызова функции dbd.  Когда близко называется, после dbd
близкого возвращения, ссылка на связанный dbd декрементируется, пока не будет
0.

@node Как писать плагины,  , Как плагины загружаются, Устройство и драйверы баз данных
@section Как писать плагины

Написание плагина довольно легко (взгляните на исходный код mysql, postgres
или sqlite dbd).  Вам нужно будет поставить несколько функций с
appropriiately выбранных имен.


Эти функции и возвращаемые типы устанавливаются хорошо на написаном dbd:

@abindex void __bcknd_make_g_db_handle(gdbi_db_handle_t* dbh)
@defun void __bcknd_make_g_db_handle(gdbi_db_handle_t* dbh)
“bcknd” это имя, используемое в открытой функции.  Эта функция должна
разобрать строку соединения и использовать Params для подключения к базе
данных бэкенда dbd.  Статус возврата должен быть установлен в dbh, чтобы
вернуть полезную информацию.  Не забудьте установить dbh поле “closed” в
ложь, если соединение установлено корректно.
@end defun

@abindex void __mysql_close_g_db_handle(gdbi_db_handle_t* dbh)
@defun void __mysql_close_g_db_handle(gdbi_db_handle_t* dbh)
Закрыть соединение и выполнить любую необходимую очистку.  Не забудьте
сделать установку поля “closed” в истинное значение, если соединение было
правильно закрыто.
@end defun

@abindex void __mysql_query_g_db_handle(gdbi_db_handle_t* dbh, char* query)
@defun void __mysql_query_g_db_handle(gdbi_db_handle_t* dbh, char* query)
Это должно запустить запрос и установить статус, но не возвращает ни одной
строки.  Для возврата строк, функция GetRow должна быть реализована.
@end defun

@defun SCM __mysql_getrow_g_db_handle(gdbi_db_handle_t* dbh)
Эта функция должна возвращать одну строку из ранее выполненного запроса.
Это, как правило, можно использовать более чем один раз.  Когда больше нет
доступных строк, #f должно быть возвращено.

Возвращаемая строка должна быть ассоциативным списком, то есть, списком пар,
где car это имя поля, и cdr является его значение (если это возможно, то
значение следует использовать ближайшего возможного типа guile/scheme).
@end defun

@node Все функции, Заключение, Устройство и драйверы баз данных, Top
@chapter Все функции
Функции DBI
@printindex aa
Функции DBD
@printindex ab

@node Заключение,  , Все функции, Top
@chapter Заключение
Это все, на любые другие вопросы, смотреть исходный код :)

Этот документ был создан Линас Vepstas мая 18 2010, с использованием
texi2html 1.78. и пересобран Обинякиным Алексеем 16.10.2020

